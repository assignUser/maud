empty:
  template: ''
  rendered: ''
  compiled: ''

literal:
  template: 'Hello world'
  rendered: 'Hello world'
  compiled: |
    # literal 1:1-1:12
    ##################################################################################
    # Hello world
    # ^~~~~~~~~~^
    ##################################################################################
    render([[Hello world]])


variable substitution:
  definitions: [FOO=foo-val]
  template: '@FOO@'
  rendered: foo-val
  compiled: |
    # reference 1:2-1:5
    ##################################################################################
    # @FOO@
    #  ^~^
    ##################################################################################
    render("${FOO}")


variable substitution in name:
  definitions: [FOO_bar=foo-val, BAR=bar]
  template: '@FOO_${BAR}@'
  rendered: foo-val
  compiled: |
    # reference 1:2-1:12
    ##################################################################################
    # @FOO_${BAR}@
    #  ^~~~~~~~~^
    ##################################################################################
    render("${FOO_${BAR}}")


variable substitution error with invalid name:
  template: |
    @cmake_policy(SET CMP0010 NEW)@
    @FOO_${BAR@
  render error: |
    syntax error, .* expecting }.*


literal at:
  template: 'Hello @@ world'
  rendered: 'Hello @ world'
  compiled: |
    # literal 1:1-1:7
    ##################################################################################
    # Hello @@ world
    # ^~~~~^
    ##################################################################################
    render([[Hello ]])

    # @@ -> @ 1:8-1:8
    ##################################################################################
    # Hello @@ world
    #        ^
    ##################################################################################
    render("@")

    # literal 1:9-1:15
    ##################################################################################
    # Hello @@ world
    #         ^~~~~^
    ##################################################################################
    render([[ world]])


explicit render:
  template: '@render("foo")'
  rendered: foo
  compiled: |
    # commands 1:2-1:15
    ##################################################################################
    # @render("foo")
    #  ^~~~~~~~~~~~^
    ##################################################################################
    render("foo")


explicit render err:
  template: '@render("foo\n"'
  compiled: |
    # commands 1:2-1:16
    ##################################################################################
    # @render("foo\n"
    #  ^~~~~~~~~~~~~^
    ##################################################################################
    render("foo\n"
  render error: |
    Parse error.  Function missing ending ")".  End of file reached.


explicit render with variable:
  definitions: [FOO=foo-val]
  template: '@render("${FOO}\n")'
  compiled: |
    # commands 1:2-1:20
    ##################################################################################
    # @render("${FOO}\n")
    #  ^~~~~~~~~~~~~~~~~^
    ##################################################################################
    render("${FOO}\n")
  rendered: |
    foo-val


if_else filter:
  definitions: [TRUTHY=ON, FALSY=OFF]
  template: '@TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@'
  rendered: 10
  compiled: |
    # pipeline init 1:2-1:9
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #  ^~~~~~^
    ##################################################################################
    set(IT "${TRUTHY}")

    # pipeline filter 1:11-1:23
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #           ^~~~~~~~~~~^
    ##################################################################################
    template_filter_if_else(1 0)

    # pipeline output 1:23-1:23
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #                       ^
    ##################################################################################
    render("${IT}")

    # pipeline init 1:25-1:31
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #                         ^~~~~^
    ##################################################################################
    set(IT "${FALSY}")

    # pipeline filter 1:33-1:45
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #                                 ^~~~~~~~~~~^
    ##################################################################################
    template_filter_if_else(1 0)

    # pipeline output 1:45-1:45
    ##################################################################################
    # @TRUTHY | if_else(1 0)@@FALSY | if_else(1 0)@
    #                                             ^
    ##################################################################################
    render("${IT}")


string filter:
  definitions: [ "HI=hello\nworld\\" ]
  template: |
    @HI | string()@@HI | string(RAW)@
  rendered: |
    "hello\nworld\\"R"(hello
    world\)"
  compiled: |
    # pipeline init 1:2-1:5
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #  ^~^
    ##################################################################################
    set(IT "${HI}")

    # pipeline filter 1:7-1:15
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #       ^~~~~~~^
    ##################################################################################
    template_filter_string()

    # pipeline output 1:15-1:15
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #               ^
    ##################################################################################
    render("${IT}")

    # pipeline init 1:17-1:20
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #                 ^~^
    ##################################################################################
    set(IT "${HI}")

    # pipeline filter 1:22-1:33
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #                      ^~~~~~~~~~^
    ##################################################################################
    template_filter_string(RAW)

    # pipeline output 1:33-1:33
    ##################################################################################
    # @HI | string()@@HI | string(RAW)@
    #                                 ^
    ##################################################################################
    render("${IT}")


foreach filter:
  definitions: [BOOLY=ON;OFF;OFF;ON]
  template: '@BOOLY |foreach| if_else(1 0) |endforeach| join("-")@'
  rendered: '1-0-0-1'
  compiled: |
    # pipeline init 1:2-1:8
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #  ^~~~~^
    ##################################################################################
    set(IT "${BOOLY}")

    # pipeline foreach 1:9-1:16
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #         ^~~~~~^
    ##################################################################################
    set(foreach_IT_0)
    foreach(IT ${IT})

    # pipeline filter 1:18-1:31
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #                  ^~~~~~~~~~~~^
    ##################################################################################
    template_filter_if_else(1 0) 

    # pipeline endforeach 1:32-1:42
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #                                ^~~~~~~~~^
    ##################################################################################
    list(APPEND foreach_IT_1 "${IT}")
    endforeach()
    set(IT "${foreach_IT_1}")

    # pipeline filter 1:44-1:53
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #                                            ^~~~~~~~^
    ##################################################################################
    template_filter_join("-")

    # pipeline output 1:53-1:53
    ##################################################################################
    # @BOOLY |foreach| if_else(1 0) |endforeach| join("-")@
    #                                                     ^
    ##################################################################################
    render("${IT}")


foreach filter nesting error:
  definitions: [BOOLY=ON\;OFF\;OFF\;ON]
  template: '@BOOLY |foreach|foreach| if_else(1 0) |endforeach| join("-")@'
  render error: |
    Flow control statements are not properly nested.
